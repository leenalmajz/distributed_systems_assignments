syntax = "proto3";

import "google/protobuf/timestamp.proto";

package services;

enum Role {
    BASIC = 0;
    ADMINISTRATOR = 1;
    SECRETARY = 2;
    AGENT = 3;
}

message User {
    int32 user_id = 1;
    string username = 2;
    string password = 3;
    Role role = 4; // default value is the first element of the enum -> BASIC
}

message AddUserResponse {
  bool success = 1;
  string error_message = 2;
  repeated User users = 3;
}

message UpdateUserMessage {
    User old_user_data = 1;
    User new_user_data = 2;
}

message UpdateUserResponse {
    bool success = 1;
    string error_message = 2;
    repeated User users = 3;
}

message DeleteUserResponse {
    bool success = 1;
    string error_message = 2;
}

message AuthenticationMessage {
    string username = 1;
    string password = 2;
}

message AuthenticationResponse {
    bool success = 1;
    string error_message = 2;
    Role role = 3;
    string token = 4;
}

message VerifyTokenMessage {
    User user = 1;
    string token = 2;
}

message VerifyTokenResponse {
    bool success = 1;
    string error_message = 2;
}

// transaction(customer, timestamp, status (submitted, accepted, rejected), vendor-ID, amount)
message Transaction {
    int32 transaction_id = 1;
    User customer = 2;

    enum Status {
        submitted = 0;
        accepted = 1;
        rejected = 2;
    }

    Status status = 3;
    int32 vendor_id = 4;
    int32 amount = 5;
}

message AddTransactionMessage {
    User user = 1;
    Transaction Transaction = 2;
}

message AddTransactionResponse {
    bool success = 1;
    string error_message = 2;
    repeated Transaction transactions = 3;
}

message UpdateTransactionMessage {
    User user = 1;
    Transaction old_transaction_data = 2;
    Transaction new_transaction_data = 3;
}

message UpdateTransactionResponse {
    User user = 1;
    bool success = 2;
    string error_message = 3;
    repeated Transaction transactions = 4;
}

message DeleteTransactionMessage {
    User user = 1;
    Transaction transaction = 2;
}

message DeleteTransactionResponse {
    bool success = 1;
    string error_message = 2;
}

message Result {
    int32 Result_id = 1;
    int32 transaction_id = 2;
    google.protobuf.Timestamp timestamp = 3;
    bool is_fraudulent = 4;
    int32 confidence = 5;
}

message AddResultMessage {
    User user = 1;
    Transaction Transaction = 2;
    Result result = 3;
}

message AddResultResponse {
    bool success = 1;
    string error_message = 2;
    repeated Result results = 3;
}

message UpdateResultMessage {
    User user = 1;
    Transaction transaction = 2;
    Result old_result_data = 3;
    Result new_result_data = 4;
}

message UpdateResultResponse {
    User user = 1;
    bool success = 2;
    string error_message = 3;
    repeated Result results = 4;
}

message DeleteResultMessage {
    User user = 1;
    Transaction transaction = 2;
    Result result = 3;
}

message DeleteResultResponse {
    bool success = 1;
    string error_message = 2;
}


message FetchTransactionsOfUserResponse {
    User user = 1;
    bool success = 2;
    string error_message = 3;
    repeated Transaction transactions = 4;
}

message GetAllTransactionsResponse {
    User user = 1;
    bool success = 2;
    string error_message = 3;
    repeated Transaction transactions = 4;
}

message FetchResultsOfTransactionMessage {
    User user = 1;
    Transaction transaction = 2;
}

message FetchResultsOfTransactionResponse {
    bool success = 1;
    string error_message = 2;
    repeated Result Result = 3;
}

message GetAllResultsMessage {
    User user = 1;
}

message GetAllResultsResponse {
    User user = 1;
    bool success = 2;
    string error_message = 3;
    repeated Result Results = 4;
}

service AuthenticationService {
    rpc AddUser(User) returns (AddUserResponse);

    rpc UpdateUser(UpdateUserMessage) returns (UpdateUserResponse);

    rpc DeleteUser(User) returns (DeleteUserResponse);

    rpc Authenticate(AuthenticationMessage) returns (AuthenticationResponse);

    rpc VerifyToken(VerifyTokenMessage) returns (VerifyTokenResponse);
}

service TransactionService {
    rpc AddTransaction(AddTransactionMessage) returns (AddTransactionResponse);

    rpc UpdateTransaction(UpdateTransactionMessage) returns (UpdateTransactionResponse);

    rpc DeleteTransaction(DeleteTransactionMessage) returns (DeleteTransactionResponse);


    rpc AddResult(AddResultMessage) returns (AddResultResponse);

    rpc UpdateResult(UpdateResultMessage) returns (UpdateResultResponse);

    rpc DeleteResult(DeleteResultMessage) returns (DeleteResultResponse);


    rpc GetAllTransactions(User) returns (GetAllTransactionsResponse);

    rpc FetchTransactionsOfUser(User) returns (FetchTransactionsOfUserResponse);


    rpc GetAllResults(User) returns (GetAllResultsResponse);

    rpc FetchResultsOfTransaction(FetchResultsOfTransactionMessage) returns (FetchResultsOfTransactionResponse);
}

